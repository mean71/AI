# 데이터 타입(자료형)
# 데이터 타입 : 데이터(값)의 형태
# 데이터 타입 종류
# 정수형(int) : 소수점이 없는 숫자(양수, 0, 음수)
# 실수형(float) : 소수점이 있는 숫자
# 문자열(str)
# 불리언(bool) : 참(True)/거짓(False) 표현하는 자료형

# 자료형의 확인
# type(값) : 데이터(값) 또는 변수에 저장된 데이터의
# 자료형을 확인하는 도구

# 변수
# 데이터를 저장하는 상자(공간)

# 변수 활용 장점
# 1. 데이터에 의미를 부여
# age = 20
# 2. 유지보수성을 높이고, 가독성을 높인다.

# 재할당
# 기존 변수에 새로운 데이터(값)을 할당(저장)
# age = 20  변수 age에 값 20 할당
# age = 30  변수 age에 값 30 재할당

# 동시할당
# 한 줄에 여러개의 변수를 생성하고, 데이터(값)을 할당하는 방법
# number1 = 20
# number2 = 20
# 데이터 20을 number2에 할당하고, number2를 number1에 할당
# number1 = number2 = 20

# 위치에 맞는 변수에 각 데이터(값)을 할당
# number3, number4 = 3, 4


# 출력(print)
# print(데이터) : 터미널 영역에 데이터를 출력해주는 도구
# print(데이터1, 데이터2, 변수1, 변수2)
# 쉼표(,)를 기준으로 각 데이터와 변수가 출력되는데
# 실제 터미널에서는 공백( )를 기준으로 출력된다.
# number1 = 10
# number2 = 20
# print("number1 =",number1, "number2 =",number2)
# 출력 : number1 = 10 number2 = 20

# print(end="출력 마지막 문자")
# 만약 출력 마지막 문자를 ! 로 변경하고 싶을 때
# print("Hello World",end="!")

# 사용자 입력(input)
# 개발자가 정해놓은 데이터가 아닌 사용자에게 정보를 요청할 때 사용한다.
# 예시) 생년월일, 성별, 키, 몸무게, 이메일, 이름

# input("프롬프트(안내 메세지)")
# input("나이를 입력해 주세요.")

# input() 활용 주의사항
# 1. 사용자에게 입력받은 데이터는 변수에 할당을 하자.
# 2. 입력받은 데이터의 자료형은 문자열(str)
# 숫자 모양의 데이터를 입력 받아도 자료형은 문자열(str)
# int(input("나이를 입력해 주세요."))
# float(input("키를 입력해 주세요."))


# 연산자
# 산술연산자
# 사칙연사, 몫 계산, 나머지 계산, 제곱 계산

# 비교 연산자
# ==(같다), !=(다르다), >(왼쪽이 크다), <(오른쪽이 크다)
# >=, <=

# 논리 연산자
# and, or, not
# A and B : A와 B 모두 참(True)일 때 참(True) 생성
# 예시) True and Ture -> True
# 예시2) False and True -> False

# A or B : A 또는 B 중 하나라도 참(True)일 때 참(True) 생성
# 예시) True and False -> True
# 예시2) False and False -> False

# not A : A를 반대되는 불리언 데이터를 생성
# 예시) not True -> False
# 예시2) not 0 -> True

# 다른 데이터 타입의 Bool형으로의 변환
# 숫자형 / 문자열 -> bool형으로 변환할 때 규칙
# 0, 0.0, "" 은 거짓(False) 변환

# 비교 연산자와 논리 연산자
# 비교 연산자가 먼저 실행되고, 논리 연산자가 실행된다.
# 비교 연산자의 결과 -> 참(True) / 거짓(False) 생성
# 논리 연산자는 입력(A / B)가 참 / 거짓 필요
# 예시) A > B or A != B
# A > B / A != B 가 먼저 계산되고,
# or 연산자가 마지막에 실행된다.

# 조건문
# if elif else
"""
if 조건식:
    if 조건식이 참(Ture) 내부 코드블럭이 실행
    1 tab으로 구분되는 코드 뭉치
    1 tab(들여쓰기)로 구분되는 실행할 코드들

if 조건식의 결과와 상관없이 실행되는 코드
"""
"""
if 조건식1:
elif 조건식2:
    조건식1이 거짓일 때 조건식2를 확인
elif 조건식3:
    조건식1,2가 거짓일 때 조건식3을 확인
elif 조건식4:
    조건식1,2,3가 거짓일 때 조건식4를 확인
else:
    위의 모두 조건식의 결과가 거짓(False)일 때
    코드 뭉치가 실행된다.
"""

# 컨테이너 자료형
# 리스트, 문자열, 튜플
# 여러 데이터를 하나의 변수에 할당(저장)
# 리스트의 특징
# 1. 자료형 구분없이 데이터를 저장
# 2. 0개 이상의 데이터를 저장
# 문자열의 특징
# 1. 문자만 저장
# 2. 데이터의 수정(추가, 삭제, 원소 수정)이 불가능
# 튜플의 특징
# 1. 자료형 구분없이 데이터를 저장
# 2. 데이터의 수정이 불가능
# string = "Hello World"
# 인덱싱을 활용한 수정
# string[0] = "h"

# list_ = ["H", "e", "l", "l", "o"]
# list_[0] = "h"

# range() : 연속된 정수 목록을 생성하는 도구(자료형)
# range(시작 정수, 끝 정수, 간격)
# 시작 정수부터 끝 정수 - 1 까지 간격만큼 목록을 생성
# range(0, 11, 1)
# 결과 : 0 1 2 3 4 5 6 7 8 9 10

# 반복문
# for 반복문
"""
for 변수 in 컨테이너:
    코드 블럭
    실행할 코드
    1tab으로 구분한 코드 뭉치
"""

# while 반복문
"""

기준변수가 필요하다.

while 조건식:
    조건식이 참(Ture)이면 계속해서 반복
    조건식이 거짓(False)이면 반복문을 종료하는 문법


    조건식이 거짓(False)가 되기 위한 기준변수에 대한 변화식이 필요하다.
"""
"""예시
# 기준변수
number = 100

while number != 0:
    print(number)
    # 기준변수 number에 대한 변화식
    number -= 1
"""

# break / continue
# 반복문의 제어하는 키워드
# break
# 반복문을 완전 종료
# continue
# 현재 실행 중인 반복은 종료하고, 다음 반복으로 넘어간다
"""
list_ = [1,2,3,4]
"""
# 조건문과 함께 사용한다.
